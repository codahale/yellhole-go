// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createImage = `-- name: CreateImage :exec
insert into
    image (image_id, filename, format, created_at)
values
    (?, ?, ?, ?)
`

func (q *Queries) CreateImage(ctx context.Context, imageID string, filename string, format string, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, createImage,
		imageID,
		filename,
		format,
		createdAt,
	)
	return err
}

const createNote = `-- name: CreateNote :exec
insert into
    note (note_id, body, created_at)
values
    (?, ?, ?)
`

func (q *Queries) CreateNote(ctx context.Context, noteID string, body string, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, createNote, noteID, body, createdAt)
	return err
}

const createSession = `-- name: CreateSession :exec
insert into
    session (session_id, created_at)
values
    (?, ?)
`

func (q *Queries) CreateSession(ctx context.Context, sessionID string, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, createSession, sessionID, createdAt)
	return err
}

const createWebauthnCredential = `-- name: CreateWebauthnCredential :exec
insert into
    webauthn_credential (credential_data, created_at)
values
    (?, ?)
`

func (q *Queries) CreateWebauthnCredential(ctx context.Context, credentialData *JSONCredential, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, createWebauthnCredential, credentialData, createdAt)
	return err
}

const createWebauthnSession = `-- name: CreateWebauthnSession :exec
insert into
    webauthn_session (webauthn_session_id, session_data, created_at)
values
    (?, ?, ?)
`

func (q *Queries) CreateWebauthnSession(ctx context.Context, webauthnSessionID string, sessionData *JSONSessionData, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, createWebauthnSession, webauthnSessionID, sessionData, createdAt)
	return err
}

const deleteWebauthnSession = `-- name: DeleteWebauthnSession :one
delete from webauthn_session
where
    webauthn_session_id = ?
    and created_at > ? returning session_data
`

func (q *Queries) DeleteWebauthnSession(ctx context.Context, webauthnSessionID string, createdAt time.Time) (*JSONSessionData, error) {
	row := q.db.QueryRowContext(ctx, deleteWebauthnSession, webauthnSessionID, createdAt)
	var session_data *JSONSessionData
	err := row.Scan(&session_data)
	return session_data, err
}

const hasWebauthnCredential = `-- name: HasWebauthnCredential :one
select
    count(1) > 0
from
    webauthn_credential
`

func (q *Queries) HasWebauthnCredential(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasWebauthnCredential)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const noteByID = `-- name: NoteByID :one
select
    note_id,
    body,
    created_at
from
    note
where
    note_id = ?
`

func (q *Queries) NoteByID(ctx context.Context, noteID string) (Note, error) {
	row := q.db.QueryRowContext(ctx, noteByID, noteID)
	var i Note
	err := row.Scan(&i.NoteID, &i.Body, &i.CreatedAt)
	return i, err
}

const notesByDate = `-- name: NotesByDate :many
select
    note_id,
    body,
    created_at
from
    note
where
    ?1 <= created_at
    and created_at < ?2
order by
    created_at desc
`

func (q *Queries) NotesByDate(ctx context.Context, startDate time.Time, endDate time.Time) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, notesByDate, startDate, endDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(&i.NoteID, &i.Body, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const purgeSessions = `-- name: PurgeSessions :execresult
delete from session
where
    created_at < ?
`

func (q *Queries) PurgeSessions(ctx context.Context, createdAt time.Time) (sql.Result, error) {
	return q.db.ExecContext(ctx, purgeSessions, createdAt)
}

const purgeWebauthnSessions = `-- name: PurgeWebauthnSessions :execresult
delete from webauthn_session
where
    created_at < ?
`

func (q *Queries) PurgeWebauthnSessions(ctx context.Context, createdAt time.Time) (sql.Result, error) {
	return q.db.ExecContext(ctx, purgeWebauthnSessions, createdAt)
}

const recentImages = `-- name: RecentImages :many
select
    image_id, filename, format, created_at
from
    image
order by
    created_at desc
limit
    ?
`

func (q *Queries) RecentImages(ctx context.Context, limit int64) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, recentImages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ImageID,
			&i.Filename,
			&i.Format,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recentNotes = `-- name: RecentNotes :many
select
    note_id,
    body,
    created_at
from
    note
order by
    created_at desc
limit
    ?
`

func (q *Queries) RecentNotes(ctx context.Context, limit int64) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, recentNotes, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(&i.NoteID, &i.Body, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sessionExists = `-- name: SessionExists :one
select
    count(1) > 0
from
    session
where
    session_id = ?
    and created_at > ?
`

func (q *Queries) SessionExists(ctx context.Context, sessionID string, createdAt time.Time) (bool, error) {
	row := q.db.QueryRowContext(ctx, sessionExists, sessionID, createdAt)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const webauthnCredentials = `-- name: WebauthnCredentials :many
select
    credential_data
from
    webauthn_credential
`

func (q *Queries) WebauthnCredentials(ctx context.Context) ([]*JSONCredential, error) {
	rows, err := q.db.QueryContext(ctx, webauthnCredentials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*JSONCredential
	for rows.Next() {
		var credential_data *JSONCredential
		if err := rows.Scan(&credential_data); err != nil {
			return nil, err
		}
		items = append(items, credential_data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const weeksWithNotes = `-- name: WeeksWithNotes :many
select
    cast(
        date (datetime (created_at, 'weekday 0', '-7 days')) as text
    ) as start_date,
    cast(
        date (datetime (created_at, 'weekday 0', '-1 day')) as text
    ) as end_date
from
    note
group by
    1
order by
    1 desc
`

type WeeksWithNotesRow struct {
	StartDate string
	EndDate   string
}

func (q *Queries) WeeksWithNotes(ctx context.Context) ([]WeeksWithNotesRow, error) {
	rows, err := q.db.QueryContext(ctx, weeksWithNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WeeksWithNotesRow
	for rows.Next() {
		var i WeeksWithNotesRow
		if err := rows.Scan(&i.StartDate, &i.EndDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
