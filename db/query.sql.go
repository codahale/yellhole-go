// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const allNoteTimestamps = `-- name: AllNoteTimestamps :many
select created_at
from note
`

func (q *Queries) AllNoteTimestamps(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, allNoteTimestamps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var created_at int64
		if err := rows.Scan(&created_at); err != nil {
			return nil, err
		}
		items = append(items, created_at)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createImage = `-- name: CreateImage :exec
insert into image (image_id, filename, format, created_at)
values (?, ?, ?, ?)
`

type CreateImageParams struct {
	ImageID   string
	Filename  string
	Format    string
	CreatedAt int64
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) error {
	_, err := q.db.ExecContext(ctx, createImage,
		arg.ImageID,
		arg.Filename,
		arg.Format,
		arg.CreatedAt,
	)
	return err
}

const createNote = `-- name: CreateNote :exec
insert into note (note_id, body, created_at) values (?, ?, ?)
`

type CreateNoteParams struct {
	NoteID    string
	Body      string
	CreatedAt int64
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) error {
	_, err := q.db.ExecContext(ctx, createNote, arg.NoteID, arg.Body, arg.CreatedAt)
	return err
}

const createSession = `-- name: CreateSession :exec
insert into session (session_id, created_at)
values (?, ?)
`

type CreateSessionParams struct {
	SessionID string
	CreatedAt int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.SessionID, arg.CreatedAt)
	return err
}

const createWebauthnCredential = `-- name: CreateWebauthnCredential :exec
insert into webauthn_credential (credential_data, created_at) values (?, ?)
`

type CreateWebauthnCredentialParams struct {
	CredentialData *JSONCredential
	CreatedAt      int64
}

func (q *Queries) CreateWebauthnCredential(ctx context.Context, arg CreateWebauthnCredentialParams) error {
	_, err := q.db.ExecContext(ctx, createWebauthnCredential, arg.CredentialData, arg.CreatedAt)
	return err
}

const createWebauthnSession = `-- name: CreateWebauthnSession :exec
insert into webauthn_session (webauthn_session_id, session_data, created_at) values (?, ?, ?)
`

type CreateWebauthnSessionParams struct {
	WebauthnSessionID string
	SessionData       *JSONSessionData
	CreatedAt         int64
}

func (q *Queries) CreateWebauthnSession(ctx context.Context, arg CreateWebauthnSessionParams) error {
	_, err := q.db.ExecContext(ctx, createWebauthnSession, arg.WebauthnSessionID, arg.SessionData, arg.CreatedAt)
	return err
}

const deleteWebauthnSession = `-- name: DeleteWebauthnSession :one
delete from webauthn_session 
where webauthn_session_id = ? and created_at > ? 
returning session_data
`

type DeleteWebauthnSessionParams struct {
	WebauthnSessionID string
	CreatedAt         int64
}

func (q *Queries) DeleteWebauthnSession(ctx context.Context, arg DeleteWebauthnSessionParams) (*JSONSessionData, error) {
	row := q.db.QueryRowContext(ctx, deleteWebauthnSession, arg.WebauthnSessionID, arg.CreatedAt)
	var session_data *JSONSessionData
	err := row.Scan(&session_data)
	return session_data, err
}

const hasWebauthnCredential = `-- name: HasWebauthnCredential :one
select count(1) > 0 from webauthn_credential
`

func (q *Queries) HasWebauthnCredential(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasWebauthnCredential)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const noteByID = `-- name: NoteByID :one
select note_id, body, created_at
from note
where note_id = ?
`

func (q *Queries) NoteByID(ctx context.Context, noteID string) (Note, error) {
	row := q.db.QueryRowContext(ctx, noteByID, noteID)
	var i Note
	err := row.Scan(&i.NoteID, &i.Body, &i.CreatedAt)
	return i, err
}

const notesByDate = `-- name: NotesByDate :many
select note_id, body, created_at
from note
where created_at >= ?1 and created_at < ?2 
order by created_at desc
`

type NotesByDateParams struct {
	Start int64
	End   int64
}

func (q *Queries) NotesByDate(ctx context.Context, arg NotesByDateParams) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, notesByDate, arg.Start, arg.End)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(&i.NoteID, &i.Body, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const purgeSessions = `-- name: PurgeSessions :execresult
delete from session where created_at < ?
`

func (q *Queries) PurgeSessions(ctx context.Context, createdAt int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, purgeSessions, createdAt)
}

const purgeWebauthnSessions = `-- name: PurgeWebauthnSessions :execresult
delete from webauthn_session where created_at < ?
`

func (q *Queries) PurgeWebauthnSessions(ctx context.Context, createdAt int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, purgeWebauthnSessions, createdAt)
}

const recentImages = `-- name: RecentImages :many
select image_id, filename, format, created_at
from image
order by created_at desc
limit ?
`

func (q *Queries) RecentImages(ctx context.Context, limit int64) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, recentImages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ImageID,
			&i.Filename,
			&i.Format,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recentNotes = `-- name: RecentNotes :many
select note_id, body, created_at
from note
order by created_at desc
limit ?
`

func (q *Queries) RecentNotes(ctx context.Context, limit int64) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, recentNotes, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(&i.NoteID, &i.Body, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sessionExists = `-- name: SessionExists :one
select count(1) > 0
from session
where session_id = ? and created_at > ?
`

type SessionExistsParams struct {
	SessionID string
	CreatedAt int64
}

func (q *Queries) SessionExists(ctx context.Context, arg SessionExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, sessionExists, arg.SessionID, arg.CreatedAt)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const webauthnCredentials = `-- name: WebauthnCredentials :many
select credential_data from webauthn_credential
`

func (q *Queries) WebauthnCredentials(ctx context.Context) ([]*JSONCredential, error) {
	rows, err := q.db.QueryContext(ctx, webauthnCredentials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*JSONCredential
	for rows.Next() {
		var credential_data *JSONCredential
		if err := rows.Scan(&credential_data); err != nil {
			return nil, err
		}
		items = append(items, credential_data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
